<?php

use ILIAS\FileUpload\DTO\ProcessingStatus;
use ILIAS\FileUpload\DTO\UploadResult;
use ILIAS\FileUpload\Location;
use srag\Plugins\SrGeogebra\Forms\GeogebraFormGUI;
use srag\Plugins\SrGeogebra\Utils\SrGeogebraTrait;
use srag\DIC\SrGeogebra\DICTrait;

/**
 * Class ilSrGeogebraPluginGUI
 *
 * Generated by SrPluginGenerator v1.3.4
 *
 * @author studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 *
 * @ilCtrl_isCalledBy ilSrGeogebraPluginGUI: ilPCPluggedGUI
 */
class ilSrGeogebraPluginGUI extends ilPageComponentPluginGUI
{

    use DICTrait;
    use SrGeogebraTrait;
    const PLUGIN_CLASS_NAME = ilSrGeogebraPlugin::class;
    const CMD_CANCEL = "cancel";
    const CMD_CREATE = "create";
    const CMD_EDIT = "edit";
    const CMD_INSERT = "insert";
    const CMD_UPDATE = "update";
    const DATA_FOLDER = "geogebra";
    const ID_PREFIX = "geogebra_page_component_";


    /**
     * @var int
     */
    protected static $id_counter = 0;

    protected $pl;


    /**
     * ilSrGeogebraPluginGUI constructor
     */
    public function __construct()
    {
        parent::__construct();
        $this->pl = new ilSrGeogebraPlugin();
    }


    /**
     * @inheritDoc
     */
    public function executeCommand()/*:void*/
    {
        $next_class = self::dic()->ctrl()->getNextClass($this);

        switch (strtolower($next_class)) {
            default:
                $cmd = self::dic()->ctrl()->getCmd();

                switch ($cmd) {
                    case self::CMD_CANCEL:
                    case self::CMD_CREATE:
                    case self::CMD_EDIT:
                    case self::CMD_INSERT:
                    case self::CMD_UPDATE:
                        $this->{$cmd}();
                        break;

                    default:
                        break;
                }
                break;
        }
    }


    /**
     * @param string $properties
     *
     * @return ilPropertyFormGUI
     */
    protected function getForm($properties = "") : ilPropertyFormGUI
    {
        if (empty($properties)) {
            $form = new GeogebraFormGUI($this);
        } else {
            $form = new GeogebraFormGUI($this, $properties);
        }

        return $form;
    }


    /**
     * @inheritDoc
     */
    public function insert()/*:void*/
    {
        $this->edit();
    }


    /**
     * @inheritDoc
     */
    public function create()/*:void*/
    {
        $form = $this->getForm();
        $form->setValuesByPost();

        if (!$form->checkInput()) {
            self::output()->output($form);

            return;
        }

        $upload = self::dic()->upload();

        if (!$upload->hasUploads() || $upload->hasBeenProcessed()) {
            $form->setValuesByPost();

            return $form->getHTML();
        }

        $upload->process();

        /** @var UploadResult $uploadResult */
        $uploadResult = array_values($upload->getResults())[0];

        if (!$uploadResult || $uploadResult->getStatus()->getCode() !== ProcessingStatus::OK) {
            $form->setValuesByPost();

            return $form->getHTML();
        }

        $ext = pathinfo($uploadResult->getName(), PATHINFO_EXTENSION);
        $file_name = $_POST["srgg_title"] . "." . $ext;

        // Adjust white list
        self::dic()->settings()->set("suffix_custom_white_list", "ggb");

        $upload->moveOneFileTo(
            $uploadResult,
            self::DATA_FOLDER,
            Location::WEB,
            $file_name
        );

        $properties = [
            "legacyFileName" => $_FILES["srgg_file"]["name"],
            "fileName"       => $file_name,
            "title"          => $_POST["srgg_title"]
        ];

        $this->createElement($properties);
        $this->returnToParent();
    }


    /**
     * @inheritDoc
     */
    public function edit()/*:void*/
    {
        $form = $this->getForm($this->getProperties());

        self::output()->output($form);
    }


    /**
     *
     */
    public function update()/*:void*/
    {
        $properties = $this->getProperties();
        $form = $this->getForm($properties);
        $form->setValuesByPost();

        if (!$form->checkInput()) {
            self::output()->output($form);

            return;
        }

        if (!empty($_FILES["srgg_file"]["name"])) {
            $upload = self::dic()->upload();

            if (!$upload->hasUploads() || $upload->hasBeenProcessed()) {
                $form->setValuesByPost();

                return $form->getHTML();
            }

            $upload->process();

            /** @var UploadResult $uploadResult */
            $uploadResult = array_values($upload->getResults())[0];

            if (!$uploadResult || $uploadResult->getStatus()->getCode() !== ProcessingStatus::OK) {
                $form->setValuesByPost();

                return $form->getHTML();
            }

            $ext = pathinfo($uploadResult->getName(), PATHINFO_EXTENSION);
            $file_name = $_POST["srgg_title"] . "." . $ext;

            // Adjust white list
            self::dic()->settings()->set("suffix_custom_white_list", "ggb");

            $upload->moveOneFileTo(
                $uploadResult,
                self::DATA_FOLDER,
                Location::WEB,
                $file_name,
                true
            );

            $properties = [
                "legacyFileName" => $_FILES["srgg_file"]["name"],
                "fileName"       => $file_name
            ];
        }

        $properties["title"] = $_POST["srgg_title"];

        $this->updateElement($properties);
        $this->returnToParent();
    }


    /**
     *
     */
    public function cancel()/*:void*/
    {
        $this->returnToParent();
    }


    protected function loadJS()
    {
        // TEST IF TEMPLATE/PL WORKS
        self::dic()->ui()->mainTemplate()->addJavaScript($this->pl->getDirectory() . '/js/deployggb.js');
        self::dic()->ui()->mainTemplate()->addJavaScript($this->pl->getDirectory() . '/js/ggb_create.js');
    }


    /**
     * @inheritDoc
     */
    public function getElementHTML(/*string*/ $a_mode, array $a_properties, /*string*/ $plugin_version) : string
    {
        self::$id_counter += 1;
        $id = self::ID_PREFIX . self::$id_counter;
        $plugin_dir = $this->pl->getDirectory();
        $file_name = ILIAS_WEB_DIR . '/' . CLIENT_ID . '/' . self::DATA_FOLDER . '/' . $a_properties["fileName"];

        $this->loadJS();

        $tpl = $template = self::plugin()->template("tpl.geogebra.html");
        $tpl->setVariable("ID", $id);

        self::dic()->ui()->mainTemplate()->addOnLoadCode('GeogebraPageComponent.create("' . $id . '", "' . $plugin_dir . '", "' . $file_name . '");');

        return $tpl->get();
    }

}
