diff --git a/composer.json b/composer.json
index 7a726bc..622a10e 100644
--- a/composer.json
+++ b/composer.json
@@ -2,7 +2,7 @@
     "name": "ondrejbouda/php7backport",
     "require": {
         "php": ">=5.4.0",
-        "nikic/php-parser": "1.4.0"
+        "nikic/php-parser": "4.2.4"
     },
     "require-dev": {
         "tracy/tracy": ">=2.3.2",
diff --git a/convert.php b/convert.php
index 77f5106..98ef1f7 100644
--- a/convert.php
+++ b/convert.php
@@ -1,6 +1,7 @@
 <?php

-require_once('vendor/autoload.php');
+// Fix relative path with __DIR__
+require_once(__DIR__ . '/vendor/autoload.php');

 use Bouda\Php7Backport\DirectoryBackporter;

diff --git a/src/Bouda/Php7Backport/Backporter.php b/src/Bouda/Php7Backport/Backporter.php
index 6d03411..3b554f3 100644
--- a/src/Bouda/Php7Backport/Backporter.php
+++ b/src/Bouda/Php7Backport/Backporter.php
@@ -26,7 +26,8 @@ class Backporter
             )
         ));

-        $parser = new PhpParser\Parser($lexer);
+        // Updated parser library
+        $parser = new PhpParser\Parser\Php7($lexer);

         $traverser = new PhpParser\NodeTraverser;

diff --git a/src/Bouda/Php7Backport/Patch/FunctionHeaderPatch.php b/src/Bouda/Php7Backport/Patch/FunctionHeaderPatch.php
index 5ff272a..f999147 100644
--- a/src/Bouda/Php7Backport/Patch/FunctionHeaderPatch.php
+++ b/src/Bouda/Php7Backport/Patch/FunctionHeaderPatch.php
@@ -5,7 +5,7 @@ namespace Bouda\Php7Backport\Patch;
 use Bouda\Php7Backport;
 use Bouda\Php7Backport\Printer;
 use PhpParser\Node;
-
+use Throwable;

 /**
  * {@inheritdoc}
@@ -29,11 +29,20 @@ class FunctionHeaderPatch extends DefaultPatch
      */
     protected function setOriginalEndOfFunctionHeaderPosition()
     {
-        $this->tokens->reset();
+        try {
+            $this->tokens->reset();
+
+            $this->tokens->gotoPosition($this->getStartTokenPosition());
+
+            $this->tokens->findNextToken('{');
+        } catch (Throwable $ex) {
+            // Fix interfaces
+            $this->tokens->reset();

-        $this->tokens->gotoPosition($this->getStartTokenPosition());
+            $this->tokens->gotoPosition($this->getStartTokenPosition());

-        $this->tokens->findNextToken('{');
+            $this->tokens->findNextToken(';');
+        }
         $this->tokens->prevIfToken(T_WHITESPACE);
         $this->tokens->prev();

diff --git a/src/Bouda/Php7Backport/Printer/FunctionHeaderPrinter.php b/src/Bouda/Php7Backport/Printer/FunctionHeaderPrinter.php
index 922724d..2285c72 100644
--- a/src/Bouda/Php7Backport/Printer/FunctionHeaderPrinter.php
+++ b/src/Bouda/Php7Backport/Printer/FunctionHeaderPrinter.php
@@ -16,7 +16,8 @@ extends DefaultPrinter
 {
     public function pStmt_ClassMethod(Stmt\ClassMethod $node)
     {
-        return $this->pModifiers($node->type) . $this->printFunctionHeader($node);
+        // Updated parser library
+        return $this->pModifiers($node->flags) . $this->printFunctionHeader($node);
     }


diff --git a/src/Bouda/Php7Backport/Visitor/ScalarTypehint.php b/src/Bouda/Php7Backport/Visitor/ScalarTypehint.php
index ef0775e..a9aac55 100644
--- a/src/Bouda/Php7Backport/Visitor/ScalarTypehint.php
+++ b/src/Bouda/Php7Backport/Visitor/ScalarTypehint.php
@@ -6,6 +6,7 @@ use Bouda\Php7Backport;
 use Bouda\Php7Backport\Patch;

 use PhpParser\Node;
+use PhpParser\Node\Identifier;
 use PhpParser\Node\Param;


@@ -32,9 +33,7 @@ class ScalarTypehint extends Php7Backport\Visitor

     public function leaveNode(Node $node)
     {
-        if ($node instanceof Param
-            && isset($node->type->parts[0])
-            && in_array($node->type->parts[0], self::$INVALID_TYPE_HINTS, true))
+        if ($node instanceof Param && $node->type instanceof Identifier && in_array($node->type->name, self::$INVALID_TYPE_HINTS, true))
         {
             return $this->tranformAndSave($node);
         }
